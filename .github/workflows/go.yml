name: Build and Release

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: go test -v ./...

    - name: Run linter
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

    - name: Get version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=$(git describe --tags --always --dirty)-dev
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Build binary with embedded credentials
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        # Create output directory
        mkdir -p dist
        
        # Set binary name with extension for Windows
        BINARY_NAME="disgo-tui"
        if [ "$GOOS" = "windows" ]; then
          BINARY_NAME="disgo-tui.exe"
        fi
        
        # Build with embedded credentials and version info
        # Note: API credentials are embedded here for distribution
        go build -ldflags="-s -w \
          -X 'main.version=${{ steps.version.outputs.version }}' \
          -X 'github.com/s-froghyar/disgo-tui/internal/client.defaultConsumerKey=${{ secrets.DISCOGS_API_CONSUMER_KEY }}' \
          -X 'github.com/s-froghyar/disgo-tui/internal/client.defaultConsumerSecret=${{ secrets.DISCOGS_API_CONSUMER_SECRET }}'" \
          -o "dist/${BINARY_NAME}" \
          ./cmd/main.go
        
        # Create archive
        ARCHIVE_NAME="disgo-tui-${{ steps.version.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}"
        
        if [ "$GOOS" = "windows" ]; then
          cd dist && zip "../${ARCHIVE_NAME}.zip" "${BINARY_NAME}"
        else
          cd dist && tar -czf "../${ARCHIVE_NAME}.tar.gz" "${BINARY_NAME}"
        fi

    - name: Generate checksums
      run: |
        if [ "${{ matrix.goos }}" = "windows" ]; then
          sha256sum "disgo-tui-${{ steps.version.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip" >> checksums-${{ matrix.goos }}-${{ matrix.goarch }}.txt
        else
          sha256sum "disgo-tui-${{ steps.version.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz" >> checksums-${{ matrix.goos }}-${{ matrix.goarch }}.txt
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: disgo-tui-${{ matrix.goos }}-${{ matrix.goarch }}
        path: |
          disgo-tui-*
          checksums-*.txt

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Combine checksums
      run: |
        find . -name "checksums-*.txt" -exec cat {} \; | sort > checksums.txt

    - name: Generate release notes
      id: release_notes
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Generate release notes
        cat > release_notes.md << EOF
        ## 🎵 Discogs TUI $VERSION
        
        A powerful terminal interface for your Discogs collection, wishlist, and orders.
        
        ### ✨ What's New in $VERSION
        - Enhanced OAuth flow - no developer account required!
        - Improved error handling and user experience
        - Secure token storage with automatic authentication
        - Better cross-platform compatibility
        
        ### 🚀 Quick Start
        
        **No setup required!** Just download, run, and authenticate with your Discogs account.
        
        #### One-Line Install (Linux/macOS)
        \`\`\`bash
        curl -fsSL https://github.com/${{ github.repository }}/releases/download/$VERSION/install.sh | bash
        \`\`\`
        
        #### Manual Installation
        1. Download the binary for your platform below
        2. Make it executable: \`chmod +x disgo-tui\`
        3. Run: \`./disgo-tui\`
        4. Authenticate with Discogs when prompted
        5. Start browsing your collection!
        
        #### Homebrew (macOS/Linux)
        \`\`\`bash
        brew install ${{ github.repository_owner }}/tap/disgo-tui
        \`\`\`
        
        ### 🔐 Authentication
        - **First run**: Automatically opens browser for Discogs authentication
        - **Subsequent runs**: Uses securely stored credentials
        - **No API keys needed**: Everything is handled automatically
        
        ### 📋 Features
        - Browse your complete Discogs collection
        - View wishlist and order history  
        - Responsive grid layout with cover art
        - Keyboard-driven navigation
        - Secure encrypted credential storage
        - Cross-platform support (Linux, macOS, Windows)
        
        ### 🛡️ Security & Privacy
        - All authentication tokens are encrypted locally
        - No data is sent to third parties
        - Open source - verify the code yourself
        
        ### 📦 Platform Support
        | Platform | Architecture | Status |
        |----------|-------------|--------|
        | Linux    | x86_64 (amd64) | ✅ |
        | Linux    | ARM64      | ✅ |
        | macOS    | Intel      | ✅ |
        | macOS    | Apple Silicon | ✅ |
        | Windows  | x86_64     | ✅ |
        
        ### 🔍 Verification
        Verify your download using checksums:
        \`\`\`bash
        sha256sum -c checksums.txt
        \`\`\`
        
        ### 🐛 Issues?
        - Check the [troubleshooting guide](https://github.com/${{ github.repository }}#troubleshooting)
        - [Open an issue](https://github.com/${{ github.repository }}/issues/new)
        - Join discussions in [GitHub Discussions](https://github.com/${{ github.repository }}/discussions)
        EOF

    - name: Create install script
      run: |
        cat > install.sh << 'EOF'
        #!/bin/bash
        set -e
        
        # Discogs TUI Installer Script
        # Usage: curl -fsSL https://github.com/USER/REPO/releases/latest/download/install.sh | bash
        
        echo "🎵 Installing Discogs TUI..."
        echo ""
        
        # Colors for output
        RED='\033[0;31m'
        GREEN='\033[0;32m'
        YELLOW='\033[1;33m'
        BLUE='\033[0;34m'
        NC='\033[0m' # No Color
        
        # Detect OS and architecture
        OS=$(uname -s | tr '[:upper:]' '[:lower:]')
        ARCH=$(uname -m)
        
        case $ARCH in
          x86_64) ARCH="amd64" ;;
          arm64|aarch64) ARCH="arm64" ;;
          *) 
            echo -e "${RED}✗ Unsupported architecture: $ARCH${NC}"
            echo "Supported architectures: x86_64 (amd64), arm64"
            exit 1 
            ;;
        esac
        
        case $OS in
          linux|darwin) ;;
          *) 
            echo -e "${RED}✗ Unsupported operating system: $OS${NC}"
            echo "Supported operating systems: Linux, macOS"
            echo "For Windows, please download the binary manually from:"
            echo "https://github.com/${{ github.repository }}/releases/latest"
            exit 1
            ;;
        esac
        
        # Get latest version
        echo -e "${BLUE}→ Detecting latest version...${NC}"
        VERSION=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | grep '"tag_name"' | cut -d'"' -f4)
        
        if [ -z "$VERSION" ]; then
          echo -e "${RED}✗ Failed to detect latest version${NC}"
          exit 1
        fi
        
        echo -e "${GREEN}✓ Latest version: $VERSION${NC}"
        echo -e "${BLUE}→ Installing for $OS-$ARCH...${NC}"
        
        # Download URL
        ARCHIVE="disgo-tui-$VERSION-$OS-$ARCH.tar.gz"
        URL="https://github.com/${{ github.repository }}/releases/download/$VERSION/$ARCHIVE"
        
        # Create temp directory
        TMP_DIR=$(mktemp -d)
        cd "$TMP_DIR"
        
        # Download and extract
        echo -e "${BLUE}→ Downloading $ARCHIVE...${NC}"
        if ! curl -fsSL "$URL" -o "$ARCHIVE"; then
          echo -e "${RED}✗ Failed to download $ARCHIVE${NC}"
          echo "Please check your internet connection and try again."
          exit 1
        fi
        
        echo -e "${BLUE}→ Extracting...${NC}"
        tar -xzf "$ARCHIVE"
        
        # Determine install directory
        if [ -w "/usr/local/bin" ] 2>/dev/null; then
          INSTALL_DIR="/usr/local/bin"
        else
          INSTALL_DIR="${HOME}/.local/bin"
          mkdir -p "$INSTALL_DIR"
        fi
        
        # Install binary
        echo -e "${BLUE}→ Installing to $INSTALL_DIR...${NC}"
        cp disgo-tui "$INSTALL_DIR/"
        chmod +x "$INSTALL_DIR/disgo-tui"
        
        # Cleanup
        cd - > /dev/null
        rm -rf "$TMP_DIR"
        
        echo ""
        echo -e "${GREEN}✓ Discogs TUI installed successfully!${NC}"
        echo ""
        
        # Check if in PATH
        if command -v disgo-tui >/dev/null 2>&1; then
          echo -e "${GREEN}✓ Ready to use! Run: ${BLUE}disgo-tui${NC}"
        else
          echo -e "${YELLOW}⚠ Add $INSTALL_DIR to your PATH:${NC}"
          echo -e "  ${BLUE}export PATH=\"\$PATH:$INSTALL_DIR\"${NC}"
          echo ""
          echo -e "Or run directly: ${BLUE}$INSTALL_DIR/disgo-tui${NC}"
        fi
        
        echo ""
        echo -e "${GREEN}🎵 Enjoy browsing your Discogs collection!${NC}"
        EOF
        
        chmod +x install.sh

    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.release_notes.outputs.version }}
        name: "🎵 Discogs TUI ${{ steps.release_notes.outputs.version }}"
        body_path: release_notes.md
        draft: false
        prerelease: false
        files: |
          */disgo-tui-*
          checksums.txt
          install.sh
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}